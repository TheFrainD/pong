name: Build

on:
  push:
    branches: [main, dev]
    tags:
      - '*'
  pull_request:
    branches: [main, dev]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install \
        libx11-xcb-dev libfontenc-dev libxaw7-dev libxcomposite-dev \
        libxdamage-dev libxinerama-dev libxmuu-dev libxpm-dev libxres-dev \
        libxtst-dev libxv-dev libxxf86vm-dev libxcb-glx0-dev libxcb-render-util0-dev \
        libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev \
        libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev \
        libxcb-xinerama0-dev libxcb-dri3-dev uuid-dev libxcb-cursor-dev libxcb-dri2-0-dev \
        libxcb-present-dev libxcb-composite0-dev libxcb-ewmh-dev libxcb-res0-dev \
        build-essential git make pkg-config cmake ninja-build gnome-desktop-testing \
        libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev \
        libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev \
        libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
        libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev \
        libxcb-util0-dev libxcb-util-dev
    
    - name: Install conan
      if: runner.os != 'macOS'
      uses: turtlebrowser/get-conan@main

    - name: Install conan (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install pipx
        pipx install conan
    
    - name: Configure CMake
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DSOL2_ENABLE_INSTALL=OFF
        -DCMAKE_PROJECT_TOP_LEVEL_INCLUDES=${{ github.workspace }}/third-party/cmake-conan/conan_provider.cmake
        -S ${{ github.workspace }}
    
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target install

    - name: Tests
      working-directory: ${{ github.workspace }}/build
      run: ctest --output-on-failure

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact-${{ matrix.os }}
        path: ./bin/

